{
    "public function": {
        "prefix": "public function",
        "body": [
            "public ${1:prop} function ${2:name}(${3:values}):${4:return} {",
            "\t$0",
            "}"
        ],
        "description": "A public function"
    },

    "private function": {
        "prefix": "private function",
        "body": [
            "private ${1:prop} function ${2:name}(${3:values}):${4:return} {",
            "\t$0",
            "}"
        ],
        "description": "A private function"
	},
	
    "override function": {
        "prefix": "override function",
        "body": [
            "override ${1:access} function ${2:name}(${3:values}):${4:return} {",
            "\t$0",
            "}"
        ],
        "description": "An override function"
	},
	
    "if": {
        "prefix": "if",
        "body": [
            "if (${1:conditions}) {",
            "\t$0",
            "}"
        ],
        "description": "An if statement"
	},
	
    "else": {
        "prefix": "else",
        "body": [
			"else {",
			"\t$0",
			"}"
        ],
        "description": "else statement"
	},

    "if else": {
        "prefix": "ifelse",
        "body": [
            "if (${1:conditions}) {",
            "\t$2",
			"} else {",
			"\t$0",
			"}"
        ],
        "description": "An if else statement"
	},
	
    "if else if": {
        "prefix": "ifelseif",
        "body": [
            "if (${1:condition}) {",
            "\t$2",
			"} else if (${3:condition}) {",
			"\t$0",
			"}"
        ],
        "description": "An if else if statement"
	},
	
    "if else if else": {
        "prefix": "ifelseifelse",
        "body": [
            "if (${1:condition}) {",
            "\t$0",
			"} else if (${3:condition}) {",
			"\t$1",
            "} else {",
            "\t$2",
            "}"
        ],
        "description": "An if else if statement"
    },

    "accessor": {
        "prefix": "accessor",
        "body":[
            "public var ${1:name}(get, set):${4:type};",
            "",
            "private function set_${1:name}(value:${4:type}):${4:type} {",
            "\treturn this.${1:name} = value;",
            "}",
            "",
            "private function get_${1:name}():${4:type} {",
            "\treturn this.${1:name};",
            "}"
        ],
        "description": "A getter and setter with the variable definition"
    },

    "set": {
        "prefix": "set",
        "body": [
            "private function set_${1:name}(value:${2:type}):${2:return} {",
            "\treturn this.${1:name} = value;",
            "}"
        ],
        "description": "Create a setter"
    },

    "get": {
        "prefix": "get",
        "body": [
            "private function get_${1:name}():${2:return} {",
            "\treturn this.${1:name};",
            "}"
        ],
        "description": "Create a getter"
    },

    "for loop": {
        "prefix": "for", 
        "body":[
            "for (${1:i} in ${2:value}) {",
            "\t$0",
            "}"
        ],
        "description": "A for loop"
    },

    "switch": {
        "prefix": "switch",
        "body":[
            "switch (${1:subject}) {",
            "\tcase ${2:pattern}: $3",
            "\tdefault:",
            "\t\t$0",
            "}"
        ],
        "description": "A switch case"
	},
	
	"typedef": {
		"prefix": "typedef",
		"body":[
			"typedef ${1:name} = {",
			"\t$0",
			"}"
		]
	},

	"class": {
		"prefix": "class",
		"body":[
			"class ${1:name} {",
			"\tpublic function new(${2:value}) {",
			"\t\t$0",
			"\t}",
			"}"
		]
	},

	"abstract": {
		"prefix": "abstract",
		"body":[
			"abstract ${1:name}(${2:type}) {",
			"\t$0",
			"}"
		]
	},

	"abstract enum": {
		"prefix": "@:enum abstract",		
		"body":[
			"@:enum abstract ${1:name}(${2:type}) {",
			"\tvar ${3:property} = ${0:value};",
			"}"
		]
	},

	"enum": {
		"prefix": "enum",
		"body":[
			"enum ${1:name} {",
			"\t$0",
			"}"
		]
    }

}
