// Generated by Haxe 4.0.0-preview.4+1e3e5e0
if (process.version < "v4.0.0") console.warn("Module " + (typeof(module) == "undefined" ? "" : module.filename) + " requires node.js version 4.0.0 or higher");
(function ($hx_exports) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = {},$_;
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Commands = function(context,output) {
	this.buildCommand = false;
	var _gthis = this;
	this.output = output;
	this.context = context;
	Constants.set_output(output);
	Vscode.workspace.createFileSystemWatcher("**/tasks.json",true,false,true).onDidChange(function(uri) {
		_gthis.updateTaskSelecter();
	});
	this.registerCommands();
};
Commands.__name__ = true;
Commands.prototype = {
	registerCommands: function() {
		Helpers.registerCommand(this.context,"CreateProjects",$bind(this,this.createProjects));
		Helpers.registerCommand(this.context,"SetupKha",$bind(this,this.setupKha));
		Helpers.registerCommand(this.context,"ProjectManager",$bind(this,this.projectManager));
		Helpers.registerCommand(this.context,"SelectTask",$bind(this,this.selectTask));
	}
	,updateTaskSelecter: function() {
		var _g = 0;
		var _g1 = this.tasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.group != "none" && task.group != null) {
				this.selectedTask = task.taskName;
			}
			if(task.isBuildCommand) {
				this.buildCommand = true;
				this.selectedTask = task.taskName;
			}
		}
		if(this.selectedTask != "" && this.taskPicker != null) {
			this.taskPicker.text = this.selectedTask;
		}
	}
	,loadTasks: function() {
		var _g = 0;
		var _g1 = this.tasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.group != "none" && task.group != null) {
				this.selectedTask = task.taskName;
			}
			if(task.isBuildCommand) {
				this.buildCommand = true;
				this.selectedTask = task.taskName;
			}
		}
		if(this.selectedTask != "") {
			this.taskPicker = Vscode.window.createStatusBarItem(vscode__$StatusBarAlignment_StatusBarAlignment_$Impl_$.Left,12);
			this.taskPicker.tooltip = "Select a task";
			this.taskPicker.text = this.selectedTask;
			this.taskPicker.command = "hxmanager.SelectTask";
			this.taskPicker.show();
			this.context.subscriptions.push(this.taskPicker);
		}
	}
	,selectTask: function() {
		var _gthis = this;
		var items = [];
		var _g = 0;
		var _g1 = this.tasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			var quickPick = Helpers.quickPickItem(task.taskName);
			items.push(quickPick);
		}
		Vscode.window.showQuickPick(items).then(function(response) {
			if(response != null && response.label != null) {
				var taskName = response.label;
				if(_gthis.selectedTask != taskName) {
					var group = { kind : "build", isDefault : true};
					var newTasks = [];
					var _g2 = 0;
					var _g11 = _gthis.tasks;
					while(_g2 < _g11.length) {
						var task1 = _g11[_g2];
						++_g2;
						if(task1.taskName != taskName) {
							if(task1.group != null) {
								task1.group = "none";
							}
							if(_gthis.buildCommand) {
								task1.isBuildCommand = false;
							}
						}
						if(task1.taskName == taskName) {
							if(!_gthis.buildCommand) {
								task1.group = group;
							} else {
								task1.isBuildCommand = true;
							}
						}
						newTasks.push(task1);
					}
					_gthis.config.update("tasks",newTasks).then(function(s) {
						_gthis.selectedTask = taskName;
						_gthis.taskPicker.text = taskName;
					},function(response1) {
						_gthis.output.append("Error: " + Std.string(response1));
					});
				}
			}
		});
	}
	,createProjects: function() {
		var projects = new system_commands_CreateProjects(this.output);
		projects.create();
	}
	,setupKha: function() {
		var _gthis = this;
		var khaPath = Helpers.getConfiguration("khaPath");
		var props = { prompt : "What is the ROOT directory of kha?", placeHolder : "File path", ignoreFocusOut : true};
		Vscode.window.showInputBox(props).then(function(path) {
			if(sys_FileSystem.exists(path)) {
				path = haxe_io_Path.removeTrailingSlashes(path);
				path = haxe_io_Path.join([path,"make"]);
				Vscode.workspace.getConfiguration().update("hxmanager.khaPath",path,true).then(function(resolve) {
					Vscode.window.showInformationMessage("Kha source path has been set");
					_gthis.output.appendLine("Set Kha path to {" + path + "}");
				});
			} else {
				Vscode.window.showInformationMessage("Kha path does not exist");
				_gthis.output.appendLine("Kha path does not exist: {" + path + "}");
			}
		});
	}
	,projectManager: function() {
		var projects = new system_commands_ProjectManager();
		projects.manage();
	}
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.join = function(paths) {
	var paths1 = paths.filter(function(s) {
		if(s != null) {
			return s != "";
		} else {
			return false;
		}
	});
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g1 = 1;
	var _g = paths1.length;
	while(_g1 < _g) {
		var i = _g1++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g11 = 0;
	var _g2 = tmp.length;
	while(_g11 < _g2) {
		var i = _g11++;
		var _g21 = tmp.charCodeAt(i);
		switch(_g21) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i1 = _g21;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCharCode(i1);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i2 = _g21;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCharCode(i2);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.removeTrailingSlashes = function(path) {
	_hx_loop1: while(true) {
		var _g = HxOverrides.cca(path,path.length - 1);
		if(_g == null) {
			break;
		} else {
			switch(_g) {
			case 47:case 92:
				path = HxOverrides.substr(path,0,-1);
				break;
			default:
				break _hx_loop1;
			}
		}
	}
	return path;
};
var Vscode = require("vscode");
var Helpers = function() { };
Helpers.__name__ = true;
Helpers.projectPath = function(type) {
	var source = Constants.Join([Constants.get_project_root(),type]);
	if(!Helpers.pathExists(source)) {
		return null;
	}
	return source;
};
Helpers.homeRoot = function(path) {
	var home = Helpers.getConfiguration("projectsRoot");
	path.splice(0,0,home);
	var path1 = Constants.Join(path);
	return path1;
};
Helpers.pathExists = function(path) {
	if(!sys_FileSystem.exists(path)) {
		return false;
	}
	return true;
};
Helpers.getConfiguration = function(value,source) {
	if(source == null) {
		source = "hxmanager";
	}
	return Vscode.workspace.getConfiguration(source).get(value);
};
Helpers.registerCommand = function(context,name,event) {
	context.subscriptions.push(Vscode.commands.registerCommand("hxmanager." + name,event));
};
Helpers.showInput = function(options,onResolve,onReject) {
	Vscode.window.showInputBox(options).then(onResolve,onReject);
};
Helpers.quickPickItem = function(label,description,detail) {
	return { label : label, description : description, detail : detail};
};
Helpers.openProject = function(source,newWindow) {
	if(newWindow == null) {
		haxe_Log.trace("Here",{ fileName : "src/Helpers.hx", lineNumber : 111, className : "Helpers", methodName : "openProject"});
		newWindow = Vscode.workspace.getConfiguration("hxmanager").get("newWindow");
	}
	haxe_Log.trace("Here",{ fileName : "src/Helpers.hx", lineNumber : 115, className : "Helpers", methodName : "openProject"});
	var uri = vscode_Uri.file(source);
	Vscode.commands.executeCommand("vscode.openFolder",uri,newWindow).then(function(resolve) {
		haxe_Log.trace("Here",{ fileName : "src/Helpers.hx", lineNumber : 119, className : "Helpers", methodName : "openProject"});
	},function(reject) {
		haxe_Log.trace("error: " + reject,{ fileName : "src/Helpers.hx", lineNumber : 123, className : "Helpers", methodName : "openProject"});
	});
};
Helpers.renameDirectory = function(source,destination,output) {
	if(Helpers.pathExists(destination)) {
		Vscode.window.showErrorMessage("A project already exists with that name");
		output.appendLine("Error: A folder exists at the path {" + destination + "}");
		return;
	}
	js_node_Fs.renameSync(source,destination);
};
Helpers.copyFileSync = function(source,target) {
	if(sys_FileSystem.exists(target)) {
		if(js_node_Fs.lstatSync(target).isDirectory()) {
			target = js_node_Path.join(target,js_node_Path.basename(source));
		}
	}
	js_node_Fs.writeFileSync(target,js_node_Fs.readFileSync(source));
};
Helpers.copyFolders = function(source,target,callback) {
	var files = [];
	var targetFolder = js_node_Path.join(target,js_node_Path.basename(source));
	if(!sys_FileSystem.exists(targetFolder)) {
		js_node_Fs.mkdirSync(targetFolder);
	}
	if(js_node_Fs.lstatSync(source).isDirectory()) {
		files = js_node_Fs.readdirSync(source);
		var _g = 0;
		while(_g < files.length) {
			var file = files[_g];
			++_g;
			var curSource = js_node_Path.join(source,file);
			if(js_node_Fs.lstatSync(curSource).isDirectory()) {
				Helpers.copyFolders(curSource,targetFolder);
			} else {
				Helpers.copyFileSync(curSource,targetFolder);
			}
		}
	}
};
var sys_FileSystem = function() { };
sys_FileSystem.__name__ = true;
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _ ) {
		var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
		return false;
	}
};
sys_FileSystem.createDirectory = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		if(e1.code == "ENOENT") {
			sys_FileSystem.createDirectory(js_node_Path.dirname(path));
			js_node_Fs.mkdirSync(path);
		} else {
			var stat;
			try {
				stat = js_node_Fs.statSync(path);
			} catch( _ ) {
				var _1 = (_ instanceof js__$Boot_HaxeError) ? _.val : _;
				throw e1;
			}
			if(!stat.isDirectory()) {
				throw e1;
			}
		}
	}
};
var js_node_Fs = require("fs");
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var Constants = function() { };
Constants.__name__ = true;
Constants.__properties__ = {get_project_root:"get_project_root",get_templates_root:"get_templates_root"};
Constants.set_output = function(out) {
	Constants.output = out;
};
Constants.get_templates_root = function() {
	var templates = Constants.Join([Constants.extension_root,"templates"]);
	var config = Helpers.getConfiguration("templatePath");
	if(config != null) {
		if(Helpers.pathExists(config)) {
			templates = config;
		}
	}
	return templates;
};
Constants.get_project_root = function() {
	var templates = Constants.get_templates_root();
	var projects = Constants.Join([templates,"projects"]);
	return projects;
};
Constants.Join = function(paths) {
	var path = haxe_io_Path.join(paths);
	return path;
};
Constants.ApplySlash = function(directory) {
	return haxe_io_Path.addTrailingSlash(directory);
};
Constants.checkFileTypes = function(extension) {
	if(!(extension == "hx" || extension == "json")) {
		return extension == "xml";
	} else {
		return true;
	}
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
};
var Events = function(context,output) {
	var _gthis = this;
	this.output = output;
	this.context = context;
	this.parse = new Parse(output);
	var watcher = Vscode.workspace.createFileSystemWatcher("**/*.hx");
	watcher.onDidCreate(function(uri) {
		if(js_node_Fs.readFileSync(uri.fsPath,{ encoding : "utf8"}) == "") {
			Vscode.commands.getCommands(true).then(function(resolve) {
				_gthis.parse.GetClassTemplates(uri.fsPath);
			},function(reject) {
				haxe_Log.trace("Reject",{ fileName : "src/Events.hx", lineNumber : 31, className : "Events", methodName : "new"});
			});
		}
	});
};
Events.__name__ = true;
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Main = function(context) {
	this.completed_setup = false;
	haxe_Log.trace(Vscode.extensions.getExtension("jarrio.hxmanager").extensionPath,{ fileName : "src/Main.hx", lineNumber : 14, className : "Main", methodName : "new"});
	Constants.set_output(this.output);
	this.output = Vscode.window.createOutputChannel("HaxeManager");
	this.output.appendLine("Starting Haxe Manager");
	this.context = context;
	var projectsRoot = Vscode.workspace.getConfiguration("hxmanager").get("projectsRoot");
	if(projectsRoot == null) {
		this.Setup();
		this.output.show(true);
	} else {
		this.completed_setup = true;
	}
	if(this.completed_setup) {
		this.output.appendLine("Loading extension...");
		this.Load();
	}
};
Main.__name__ = true;
Main.main = $hx_exports["activate"] = function(context) {
	haxe_Log.trace = haxe_Log.trace;
	new Main(context);
};
Main.prototype = {
	Load: function() {
		var config = Helpers.getConfiguration("projectType");
		if(config == null || config == "" || config == "undefined") {
			Vscode.workspace.getConfiguration().update("hxmanager.projectType",["Haxe"],true);
			this.output.appendLine("Set global templates to Haxe");
		}
		new Events(this.context,this.output);
		new Commands(this.context,this.output);
		this.output.appendLine("Loaded events and commands");
	}
	,Setup: function() {
		var _gthis = this;
		this.output.appendLine("Running through initial setup steps...");
		var props = { prompt : "Where would you like to store your projects?", placeHolder : "File path", ignoreFocusOut : true};
		Vscode.window.showInputBox(props).then(function(input) {
			if(sys_FileSystem.exists(input)) {
				Vscode.workspace.getConfiguration().update("hxmanager.projectsRoot",input,true).then(function(resolve) {
					_gthis.completed_setup = true;
					_gthis.Load();
					Vscode.window.showInformationMessage("Project root directory has been set");
					var khaPath = haxe_io_Path.join([input,"Kha"]);
					var FlxPath = haxe_io_Path.join([input,"Flixel"]);
					var HaxPath = haxe_io_Path.join([input,"Haxe"]);
					sys_FileSystem.createDirectory(khaPath);
					sys_FileSystem.createDirectory(FlxPath);
					sys_FileSystem.createDirectory(HaxPath);
					_gthis.output.appendLine("Project root directory has been set to " + input);
				});
				return;
			} else {
				Vscode.window.showErrorMessage("Failed to set directory to {" + input + "} does it exist?");
				_gthis.output.appendLine("Couldn't find the path: " + input);
			}
		});
	}
};
Math.__name__ = true;
var Parse = function(_output) {
	this.save_location = Vscode.workspace.getConfiguration("hxmanager").get("projectsRoot");
	Parse.output = _output;
};
Parse.__name__ = true;
Parse.ParsePackage = function(directory) {
	var path = new haxe_io_Path(directory);
	var slash = "";
	if(path.backslash) {
		slash = "\\";
	} else {
		slash = "/";
	}
	var divider = "source";
	if(path.dir.indexOf(divider) == -1) {
		divider = "src";
	}
	if(path.dir.indexOf(divider) == -1) {
		divider = "Sources";
	}
	var split = path.dir.split(divider);
	if(split.length >= 2) {
		var file_location = StringTools.replace(split[1],slash,".");
		if(file_location.charAt(0) == ".") {
			file_location = file_location.substring(1);
		}
		if(file_location.charAt(file_location.length - 1) == ".") {
			file_location = file_location.substring(0,file_location.length - 2);
		}
		if(file_location == null || file_location == "") {
			Parse.output.appendLine("Package: root | File: " + Vscode.window.activeTextEditor.document.fileName);
			return "package;";
		} else {
			Parse.output.appendLine("Package: " + file_location + " | File: " + Vscode.window.activeTextEditor.document.fileName);
			return "package " + file_location + ";";
		}
	}
	return "";
};
Parse.parseLaunchConfig = function(path,name) {
	var path1 = Constants.Join([path,".vscode","launch.json"]);
	if(Helpers.pathExists(path1)) {
		var get_file = js_node_Fs.readFileSync(path1,{ encoding : "utf8"});
		var template = new haxe_Template(get_file);
		var data = { name : name};
		js_node_Fs.writeFileSync(path1,template.execute(data));
	}
};
Parse.prototype = {
	Project: function(name,project) {
		this.projectType = project;
		if(!sys_FileSystem.exists(this.save_location)) {
			Parse.output.appendLine("ERROR: Projects directory is not set or does not exist");
			return;
		}
		this.ParseProjects(name,project);
	}
	,ParseProjects: function(name,project) {
		var type = $hxEnums[project.__enum__].__constructs__[project._hx_index];
		Constants.set_output(Parse.output);
		var projects = Constants.Join([Constants.get_project_root(),type]);
		var rootProjects = Constants.Join([this.save_location,type]);
		if(!sys_FileSystem.exists(rootProjects)) {
			sys_FileSystem.createDirectory(rootProjects);
		}
		var rename_input = Constants.Join([this.save_location,type,type]);
		var rename_output = Constants.Join([this.save_location,type,name]);
		this.MoveDirectory(projects,rootProjects);
		this.RenameDirectory(rename_input,rename_output);
		var file_path = Constants.Join([rename_output,"Project.xml"]);
		if(sys_FileSystem.exists(file_path)) {
			var project_file = this.GetFileContents(file_path);
			var parse = new haxe_Template(project_file);
			var data = { name : name, height : 500, width : 500};
			project_file = parse.execute(data);
			this.SetFileContents(file_path,project_file);
		}
	}
	,RenameDirectory: function(original,destination) {
		js_node_Fs.renameSync(original,destination);
	}
	,MoveDirectory: function(original,destination) {
		Helpers.copyFolders(original,destination);
	}
	,GetFileContents: function(path) {
		return js_node_Fs.readFileSync(path,{ encoding : "utf8"});
	}
	,SetFileContents: function(path,content) {
		js_node_Fs.writeFileSync(path,content);
	}
	,GetClassTemplates: function(path) {
		var _gthis = this;
		var projectTypes = Vscode.workspace.getConfiguration("hxmanager").get("projectType");
		var detail = "";
		var _g = 0;
		while(_g < projectTypes.length) {
			var name = projectTypes[_g];
			++_g;
			detail += "" + name + ", ";
		}
		var items = [];
		var _g1 = 0;
		while(_g1 < projectTypes.length) {
			var type = projectTypes[_g1];
			++_g1;
			var file_location = Constants.Join([Constants.class_root,type,"templates.json"]);
			var parse_template = JSON.parse(js_node_Fs.readFileSync(file_location,{ encoding : "utf8"}));
			var templates = parse_template.templates;
			var _g11 = 0;
			while(_g11 < templates.length) {
				var template = templates[_g11];
				++_g11;
				items.push(this.CreateQuickPickItem(template.type,template.description,type));
			}
		}
		var template1 = "";
		var name1 = "";
		Vscode.window.showQuickPick(items,{ matchOnDetail : true, ignoreFocusOut : true}).then(function(resolve) {
			if(resolve != null && resolve.label != "") {
				name1 = resolve.label;
				var name2 = resolve.label;
				var type1 = resolve.detail;
				var contents = null;
				template1 = Constants.Join([Constants.class_root,type1,"" + name2 + ".hx"]);
				var editor = Vscode.window.activeTextEditor;
				if(editor == null || editor.document.uri.fsPath != path) {
					Parse.output.appendLine("File does not exist or file path is invalid");
					Parse.output.appendLine("Fspath: " + editor.document.uri.fsPath);
					Parse.output.appendLine("Obtained: " + resolve.detail);
					return;
				}
				contents = _gthis.ParseTemplate(template1,path);
				var package_exists = false;
				if(editor.document.getText(new vscode_Range(0,0,0,1)).length > 0) {
					Parse.output.appendLine("File is not empty");
					if(editor.document.lineCount > 2) {
						Parse.output.appendLine("File has been created with 3 or more lines");
					}
					if(editor.document.getText().indexOf("package") > -1) {
						package_exists = true;
						Parse.output.appendLine("Parsing without haxe-manager's basic package system");
						contents = _gthis.ParseTemplate(template1,path,false);
					}
				}
				editor.edit(function(edit) {
					if(!package_exists) {
						edit.insert(new vscode_Position(0,0),contents);
					} else {
						edit.insert(new vscode_Position(3,0),contents);
					}
				});
			}
		},function(reject) {
			haxe_Log.trace("Rejected: " + reject,{ fileName : "src/Parse.hx", lineNumber : 168, className : "Parse", methodName : "GetClassTemplates"});
		});
	}
	,ParseTemplate: function(source,destination,addPackage) {
		if(addPackage == null) {
			addPackage = true;
		}
		if(sys_FileSystem.exists(source) && source != null) {
			var path_data = new haxe_io_Path(destination);
			var contents = js_node_Fs.readFileSync(source,{ encoding : "utf8"});
			var getPackage = "";
			var template = new haxe_Template(contents);
			if(addPackage) {
				getPackage = Parse.ParsePackage(destination);
			}
			var contents1 = { name : path_data.file.split(".")[0], location : getPackage};
			var execute = template.execute(contents1);
			if(!addPackage) {
				execute = execute.substring(4);
			}
			return execute;
		}
		return " ";
	}
	,CreateQuickPickItem: function(label,description,detail) {
		var item = { label : label, description : description, detail : detail};
		return item;
	}
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = (e instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = true;
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var haxe_Log = function() { };
haxe_Log.__name__ = true;
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos != null && infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe__$Template_TemplateExpr = $hxEnums["haxe._Template.TemplateExpr"] = { __ename__ : true, __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"]
	,OpVar: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,OpExpr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr"],$_)
	,OpIf: ($_=function(expr,eif,eelse) { return {_hx_index:2,expr:expr,eif:eif,eelse:eelse,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","eif","eelse"],$_)
	,OpStr: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["str"],$_)
	,OpBlock: ($_=function(l) { return {_hx_index:4,l:l,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["l"],$_)
	,OpForeach: ($_=function(expr,loop) { return {_hx_index:5,expr:expr,loop:loop,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","loop"],$_)
	,OpMacro: ($_=function(name,params) { return {_hx_index:6,name:name,params:params,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["name","params"],$_)
};
haxe__$Template_TemplateExpr.__empty_constructs__ = [];
var haxe_Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw new js__$Boot_HaxeError("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
haxe_Template.__name__ = true;
haxe_Template.prototype = {
	execute: function(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new haxe_ds_List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new haxe_ds_List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw new js__$Boot_HaxeError("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCharCode(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new haxe_ds_List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new haxe_ds_List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		if(HxOverrides.substr(p,0,3) == "if ") {
			p = HxOverrides.substr(p,3,p.length - 3);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t1 = tokens.first();
			var eelse;
			if(t1 == null) {
				throw new js__$Boot_HaxeError("Unclosed 'if'");
			}
			if(t1.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t1.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t1 = tokens.pop();
				if(t1 == null || t1.p != "end") {
					throw new js__$Boot_HaxeError("Unclosed 'else'");
				}
			} else {
				t1.p = HxOverrides.substr(t1.p,4,t1.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		if(HxOverrides.substr(p,0,8) == "foreach ") {
			p = HxOverrides.substr(p,8,p.length - 8);
			var e1 = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t2 = tokens.pop();
			if(t2 == null || t2.p != "end") {
				throw new js__$Boot_HaxeError("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e1,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new haxe_ds_List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			l.add({ p : data, s : true});
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw new js__$Boot_HaxeError(l.first().p);
			}
		} catch( s ) {
			var s1 = (s instanceof js__$Boot_HaxeError) ? s.val : s;
			if(typeof(s1) == "string") {
				throw new js__$Boot_HaxeError("Unexpected '" + s1 + "' in " + expr);
			} else {
				throw s;
			}
		}
		return function() {
			try {
				return e();
			} catch( exc ) {
				throw new js__$Boot_HaxeError("Error : " + Std.string((exc instanceof js__$Boot_HaxeError) ? exc.val : exc) + " in " + expr);
			}
		};
	}
	,makeConst: function(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw new js__$Boot_HaxeError(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,makeExpr2: function(l) {
		var p = l.pop();
		if(p == null) {
			throw new js__$Boot_HaxeError("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		var _g = p.p;
		switch(_g) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			var e1 = this.makeExpr(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw new js__$Boot_HaxeError(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			var e2 = this.makeExpr(l);
			var p2 = l.pop();
			if(p2 == null || p2.p != ")") {
				throw new js__$Boot_HaxeError(p2);
			}
			var _g1 = p1.p;
			switch(_g1) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw new js__$Boot_HaxeError("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw new js__$Boot_HaxeError(p.p);
	}
	,run: function(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			var _this = this.buf;
			var x = Std.string(this.resolve(v));
			_this.b += Std.string(x);
			break;
		case 1:
			var e1 = e.expr;
			var _this1 = this.buf;
			var x1 = Std.string(e1());
			_this1.b += Std.string(x1);
			break;
		case 2:
			var eelse = e.eelse;
			var eif = e.eif;
			var e2 = e.expr;
			var v1 = e2();
			if(v1 == null || v1 == false) {
				if(eelse != null) {
					this.run(eelse);
				}
			} else {
				this.run(eif);
			}
			break;
		case 3:
			var str = e.str;
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e.l;
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e3 = val;
				this.run(e3);
			}
			break;
		case 5:
			var loop = e.loop;
			var e4 = e.expr;
			var v2 = e4();
			try {
				var x2 = v2.iterator();
				if(x2.hasNext == null) {
					throw new js__$Boot_HaxeError(null);
				}
				v2 = x2;
			} catch( e5 ) {
				var e6 = (e5 instanceof js__$Boot_HaxeError) ? e5.val : e5;
				try {
					if(v2.hasNext == null) {
						throw new js__$Boot_HaxeError(null);
					}
				} catch( e7 ) {
					var e8 = (e7 instanceof js__$Boot_HaxeError) ? e7.val : e7;
					throw new js__$Boot_HaxeError("Cannot iter on " + Std.string(v2));
				}
			}
			this.stack.push(this.context);
			var v3 = v2;
			var ctx = v3;
			while(ctx.hasNext()) {
				var ctx1 = ctx.next();
				this.context = ctx1;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e.params;
			var m = e.name;
			var v4 = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head1 = params.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p = val1;
				if(p._hx_index == 0) {
					var v5 = p.v;
					pl.push(this.resolve(v5));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this2 = this.buf;
				var x3 = Std.string(v4.apply(this.macros,pl));
				_this2.b += Std.string(x3);
			} catch( e9 ) {
				var e10 = (e9 instanceof js__$Boot_HaxeError) ? e9.val : e9;
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( e11 ) {
					var e12 = (e11 instanceof js__$Boot_HaxeError) ? e11.val : e11;
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e10) + ")";
				throw new js__$Boot_HaxeError(msg);
			}
			break;
		}
	}
};
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s += "\t";
				var tmp = n + "(";
				var _g = [];
				var _g1 = 0;
				var _g2 = con.__params__;
				while(_g1 < _g2.length) {
					var p = _g2[_g1];
					++_g1;
					_g.push(js_Boot.__string_rec(o[p],s));
				}
				return tmp + _g.join(",") + ")";
			} else {
				return n;
			}
		}
		if((o instanceof Array)) {
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g11 = 0;
			var _g3 = l;
			while(_g11 < _g3) {
				var i1 = _g11++;
				str += (i1 > 0 ? "," : "") + js_Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = (e1 instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_Path = require("path");
var system_commands_CreateProjects = function(_output) {
	system_commands_CreateProjects.output = _output;
	system_commands_CreateProjects.parse = new Parse(system_commands_CreateProjects.output);
};
system_commands_CreateProjects.__name__ = true;
system_commands_CreateProjects.prototype = {
	create: function() {
		var items = [];
		var _g = 0;
		var _g1 = system_enums_Projects.__empty_constructs__;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			items.push(Helpers.quickPickItem($hxEnums[type.__enum__].__constructs__[type._hx_index]));
		}
		Vscode.window.showQuickPick(items,{ ignoreFocusOut : true, placeHolder : "Select project type"}).then(function(resolve) {
			var kha_setup = false;
			if(Helpers.getConfiguration("khaPath") != null) {
				kha_setup = true;
			}
			if(!kha_setup && resolve.label == "Kha") {
				Vscode.window.showInformationMessage("Please run the Kha setup in the command palette");
				return;
			}
			if(Helpers.getConfiguration("projectsRoot") == null) {
				Vscode.window.showInformationMessage("The extension requires a location to store projects");
				return;
			}
			var input_props = { prompt : "Project name", placeHolder : "Type a name for the project"};
			var do_not_open = false;
			var success = function(name) {
				if(name == null || name == "" || name == "undefined") {
					Vscode.window.showWarningMessage("A project name is required");
					return;
				}
				var type1 = resolve.label;
				var source = Helpers.projectPath(type1);
				var input = Helpers.homeRoot([type1]);
				var rename = Helpers.homeRoot([type1,type1]);
				var output_file = Helpers.homeRoot([type1,name]);
				if(Helpers.pathExists(rename)) {
					Vscode.window.showErrorMessage("A folder exists with the name - " + type1);
					system_commands_CreateProjects.output.appendLine("Error: Folder exists at " + rename + ". Cannot copy project template to this location.");
					do_not_open = true;
					return;
				}
				if(Helpers.pathExists(output_file)) {
					Vscode.window.showErrorMessage("A project with that name already exists");
					system_commands_CreateProjects.output.appendLine("Error: A project already exists at the location " + output_file);
					do_not_open = true;
					return;
				}
				haxe_Log.trace("Source: " + source + " | Input: " + input,{ fileName : "src/system/commands/CreateProjects.hx", lineNumber : 93, className : "system.commands.CreateProjects", methodName : "create"});
				Helpers.copyFolders(source,input);
				Helpers.renameDirectory(rename,output_file,system_commands_CreateProjects.output);
				var root_dir = Helpers.homeRoot([type1,name]);
				var e = system_enums_Projects.Flixel;
				if($hxEnums[e.__enum__].__constructs__[e._hx_index] == type1) {
					new system_commands_projects_Flixel(type1,name,root_dir,system_commands_CreateProjects.output);
				} else {
					var e1 = system_enums_Projects.Kha;
					if($hxEnums[e1.__enum__].__constructs__[e1._hx_index] == type1) {
						new system_commands_projects_Kha(type1,name,root_dir,system_commands_CreateProjects.output);
					} else {
						system_commands_CreateProjects.output.appendLine("Here");
					}
				}
				if(Helpers.pathExists(root_dir)) {
					Helpers.openProject(root_dir,true);
					haxe_Log.trace("name: " + name,{ fileName : "src/system/commands/CreateProjects.hx", lineNumber : 115, className : "system.commands.CreateProjects", methodName : "create"});
					haxe_Log.trace("Project " + name + " created",{ fileName : "src/system/commands/CreateProjects.hx", lineNumber : 116, className : "system.commands.CreateProjects", methodName : "create"});
					return;
				} else {
					Vscode.window.showErrorMessage("Failed to create the project");
				}
				system_commands_CreateProjects.output.appendLine("Failed to create the project");
				return;
			};
			var error = function(response) {
				system_commands_CreateProjects.output.appendLine("Error - " + Std.string(response));
			};
			Helpers.showInput(input_props,success,error);
		});
	}
};
var system_commands_ProjectManager = function() {
};
system_commands_ProjectManager.__name__ = true;
system_commands_ProjectManager.prototype = {
	manage: function() {
		var projects = [];
		var homeRoot = Helpers.getConfiguration("projectsRoot");
		if(Helpers.pathExists(homeRoot)) {
			var dirs = js_node_Fs.readdirSync(homeRoot);
			if(dirs.length == 0) {
				Vscode.window.showInformationMessage("No projects to show");
				return;
			}
			var _g = 0;
			while(_g < dirs.length) {
				var dir = dirs[_g];
				++_g;
				var detail = Helpers.homeRoot([dir]);
				projects.push(Helpers.quickPickItem(dir,null,detail));
			}
			Vscode.window.showQuickPick(projects,{ matchOnDetail : true, ignoreFocusOut : true}).then(function(resolve) {
				var folders = [];
				var more_dirs = js_node_Fs.readdirSync(resolve.detail);
				if(more_dirs.length == 0) {
					Vscode.window.showInformationMessage("No projects to show");
					return;
				}
				var opened = false;
				var _g1 = 0;
				while(_g1 < more_dirs.length) {
					var project = more_dirs[_g1];
					++_g1;
					var location = Constants.Join([resolve.detail,project]);
					if(!js_node_Fs.statSync(location).isDirectory()) {
						opened = true;
						Helpers.openProject(resolve.detail);
						return;
					}
				}
				if(opened) {
					return;
				}
				var _g2 = 0;
				while(_g2 < more_dirs.length) {
					var dir1 = more_dirs[_g2];
					++_g2;
					var detail1 = Constants.Join([resolve.detail,dir1]);
					folders.push(Helpers.quickPickItem(dir1,null,detail1));
				}
				Vscode.window.showQuickPick(folders,{ matchOnDetail : true, ignoreFocusOut : true}).then(function(resolve1) {
					Helpers.openProject(resolve1.detail);
				});
			});
		}
	}
};
var system_commands_projects_Flixel = function(type,name,root_dir,output) {
	var project_xml = Constants.Join([root_dir,"Project.xml"]);
	Parse.parseLaunchConfig(root_dir,name);
	if(Helpers.pathExists(project_xml)) {
		var get_content = js_node_Fs.readFileSync(project_xml,{ encoding : "utf8"});
		var tpl = new haxe_Template(get_content);
		var data = { name : name, height : 640, width : 640};
		var content = tpl.execute(data);
		js_node_Fs.writeFileSync(project_xml,content);
		output.appendLine("Parsed Flixel project");
	}
};
system_commands_projects_Flixel.__name__ = true;
var system_commands_projects_Kha = function(type,name,root_dir,output) {
	Parse.parseLaunchConfig(root_dir,name);
	var kha_file = Constants.Join([root_dir,"khafile.js"]);
	if(Helpers.pathExists(kha_file)) {
		var get_content = js_node_Fs.readFileSync(kha_file,{ encoding : "utf8"});
		var kha_file_tpl = new haxe_Template(get_content);
		var data = { name : name};
		var content = kha_file_tpl.execute(data);
		js_node_Fs.writeFileSync(kha_file,content);
		output.appendLine("Parsed Khafile.js");
	}
	var tasks_file = Constants.Join([root_dir,".vscode","tasks.json"]);
	if(Helpers.pathExists(tasks_file)) {
		var get_content1 = js_node_Fs.readFileSync(tasks_file,{ encoding : "utf8"});
		var tasks_file_tpl = new haxe_Template(get_content1);
		var khaPath = Helpers.getConfiguration("khaPath");
		khaPath = StringTools.replace(khaPath,"\\","\\\\");
		var data1 = { path : khaPath};
		output.appendLine("Path to Kha: " + Std.string(data1));
		var content1 = tasks_file_tpl.execute(data1);
		js_node_Fs.writeFileSync(tasks_file,content1);
	}
};
system_commands_projects_Kha.__name__ = true;
var system_enums_Projects = $hxEnums["system.enums.Projects"] = { __ename__ : true, __constructs__ : ["Flixel","Haxe","Kha"]
	,Flixel: {_hx_index:0,__enum__:"system.enums.Projects",toString:$estr}
	,Haxe: {_hx_index:1,__enum__:"system.enums.Projects",toString:$estr}
	,Kha: {_hx_index:2,__enum__:"system.enums.Projects",toString:$estr}
};
system_enums_Projects.__empty_constructs__ = [system_enums_Projects.Flixel,system_enums_Projects.Haxe,system_enums_Projects.Kha];
var vscode_Position = require("vscode").Position;
var vscode_Range = require("vscode").Range;
var vscode__$StatusBarAlignment_StatusBarAlignment_$Impl_$ = require("vscode").StatusBarAlignment;
var vscode_Uri = require("vscode").Uri;
var $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
String.__name__ = true;
Array.__name__ = true;
Constants.extension_root = Vscode.extensions.getExtension("jarrio.hxmanager").extensionPath;
Constants.class_root = Constants.Join([Constants.get_templates_root(),"classes"]);
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this);

//# sourceMappingURL=main.js.map